// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SistemaEstoque.Infra.Data;

#nullable disable

namespace SistemaEstoque.Infra.Migrations
{
    [DbContext(typeof(SistemaEstoqueDbContext))]
    [Migration("20240722032130_ajustando coluna perfil acesso id em permissao categoria entidade")]
    partial class ajustandocolunaperfilacessoidempermissaocategoriaentidade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descricao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<string>("TipoItem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_item");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("categorias", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.ConfiguracaoEstoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("NotificarEstoqueMaximo")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotificarEstoqueMinimo")
                        .HasColumnType("boolean");

                    b.Property<bool>("PermiteEntradaSemLote")
                        .HasColumnType("boolean");

                    b.Property<bool>("PermiteEstoqueNegativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("PermitePassarEstoqueMaximo")
                        .HasColumnType("boolean");

                    b.Property<bool>("PermitePassarEstoqueMinimo")
                        .HasColumnType("boolean");

                    b.Property<bool>("PermiteSaidaSemLote")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Removido")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId")
                        .IsUnique();

                    b.ToTable("ConfiguracaoEstoque");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("cidade");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cpf_cnpj");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("endereco");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("estado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<int?>("ProprietarioId")
                        .HasColumnType("int")
                        .HasColumnName("proprietario_id");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefone");

                    b.Property<string>("TipoEmpresa")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_empresa");

                    b.HasKey("Id");

                    b.HasIndex("ProprietarioId");

                    b.ToTable("empresas", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.EstoqueInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("InsumoId")
                        .HasColumnType("int")
                        .HasColumnName("insumo_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<int>("QuantidadeMaxima")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_maxima");

                    b.Property<int>("QuantidadeMinima")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_minima");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("InsumoId")
                        .IsUnique();

                    b.ToTable("estoques_insumos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.EstoqueProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnName("produto_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<int>("QuantidadeMaxima")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_maxima");

                    b.Property<int>("QuantidadeMinima")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_minima");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ProdutoId")
                        .IsUnique();

                    b.ToTable("estoques_produtos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("cidade");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cpf_cnpj");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("endereco");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("estado");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("fornecedores", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.HistoricoEstoqueInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("date")
                        .HasColumnName("data_registro");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueInsumoId")
                        .HasColumnType("int")
                        .HasColumnName("estoque_insumo_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<bool?>("Removido")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstoqueInsumoId");

                    b.ToTable("historicos_estoques_insumos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.HistoricoEstoqueProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("date")
                        .HasColumnName("data_registro");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueProdutoId")
                        .HasColumnType("int")
                        .HasColumnName("estoque_produto_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<bool?>("Removido")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstoqueProdutoId");

                    b.ToTable("historicos_estoques_produtos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.HistoricoUsuarioAcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcessoValido")
                        .HasColumnType("boolean")
                        .HasColumnName("acesso_valido");

                    b.Property<DateTime>("DataAcesso")
                        .HasColumnType("date")
                        .HasColumnName("data_acesso");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<string>("IpAcesso")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip_acesso");

                    b.Property<bool?>("Removido")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_agent");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("historicos_usuarios_acessos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoria_id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descricao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<decimal?>("PrecoCustoReferencia")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("preco_custo_referencia");

                    b.Property<decimal?>("PrecoVendaReferencia")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("preco_venda_referencia");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("insumos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.LogAlteracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("date")
                        .HasColumnName("alterado_em");

                    b.Property<string>("DadosAntigos")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("dados_antigos");

                    b.Property<string>("DadosNovos")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("dados_novos");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<string>("Tabela")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tabela");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("logs_alteracoes", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("codigo");

                    b.Property<string>("CodigoBarras")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("codigo_barras");

                    b.Property<DateTime>("DataRecebimento")
                        .HasColumnType("date")
                        .HasColumnName("data_recebimento");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descricao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("int")
                        .HasColumnName("fornecedor_id");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<int>("UsuarioRecebimentoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_recebimento_id");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("UsuarioRecebimentoId");

                    b.ToTable("lotes", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.LoteInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFabricacao")
                        .HasColumnType("date")
                        .HasColumnName("data_fabricacao");

                    b.Property<DateTime>("DataValidade")
                        .HasColumnType("date")
                        .HasColumnName("data_validade");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("InsumoId")
                        .HasColumnType("int")
                        .HasColumnName("insumo_id");

                    b.Property<int>("LoteId")
                        .HasColumnType("int")
                        .HasColumnName("lote_id");

                    b.Property<decimal>("PrecoUnitarioCompra")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrecoUnitarioVenda")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("InsumoId");

                    b.HasIndex("LoteId");

                    b.ToTable("lotes_insumos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.LoteProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFabricacao")
                        .HasColumnType("date")
                        .HasColumnName("data_fabricacao");

                    b.Property<DateTime>("DataValidade")
                        .HasColumnType("date")
                        .HasColumnName("data_validade");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("LoteId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoUnitarioCompra")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrecoUnitarioVenda")
                        .HasColumnType("numeric");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnName("produto_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("LoteId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("lotes_produtos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.MovimentacaoInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataMovimentacao")
                        .HasColumnType("date")
                        .HasColumnName("data_movimentacao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("EstoqueInsumoId")
                        .HasColumnType("int")
                        .HasColumnName("estoque_insumo_id");

                    b.Property<int>("InsumoId")
                        .HasColumnType("int")
                        .HasColumnName("insumo_id");

                    b.Property<int?>("LoteInsumoId")
                        .HasColumnType("int")
                        .HasColumnName("lote_insumo_id");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("origem");

                    b.Property<decimal>("PrecoUnitarioCusto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("preco_unitario_custo");

                    b.Property<decimal>("PrecoUnitarioVenda")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("preco_unitario_venda");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstoqueInsumoId");

                    b.HasIndex("InsumoId");

                    b.HasIndex("LoteInsumoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("movimentacoes_insumos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.MovimentacaoProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataMovimentacao")
                        .HasColumnType("date")
                        .HasColumnName("data_movimentacao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("EstoqueProdutoId")
                        .HasColumnType("int")
                        .HasColumnName("estoque_produto_id");

                    b.Property<int?>("LoteProdutoId")
                        .HasColumnType("int")
                        .HasColumnName("lote_produto_id");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("origem");

                    b.Property<decimal>("PrecoUnitarioCusto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("preco_unitario_custo");

                    b.Property<decimal>("PrecoUnitarioVenda")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("preco_unitario_venda");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnName("produto_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstoqueProdutoId");

                    b.HasIndex("LoteProdutoId");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("movimentacoes_produtos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.PerfilAcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("perfis_acessos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Permissoes.PermissaoCategoria", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Criar")
                        .HasColumnType("boolean")
                        .HasColumnName("criar");

                    b.Property<bool>("Editar")
                        .HasColumnType("boolean")
                        .HasColumnName("editar");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<bool>("Excluir")
                        .HasColumnType("boolean")
                        .HasColumnName("excluir");

                    b.Property<int>("PerfilAcessoId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_acesso_id");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<bool>("Visualizar")
                        .HasColumnType("boolean")
                        .HasColumnName("visualizar");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("permissoes_categorias", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Permissoes.PermissaoProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Criar")
                        .HasColumnType("boolean")
                        .HasColumnName("criar");

                    b.Property<bool>("Editar")
                        .HasColumnType("boolean")
                        .HasColumnName("editar");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<bool>("Excluir")
                        .HasColumnType("boolean")
                        .HasColumnName("excluir");

                    b.Property<int>("PerfilAcessoId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_acesso_id");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<bool>("Visualizar")
                        .HasColumnType("boolean")
                        .HasColumnName("visualizar");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PerfilAcessoId")
                        .IsUnique();

                    b.ToTable("permissoes_produtos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoria_id");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descricao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<decimal?>("PrecoCustoReferencia")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("preco_custo_referencia");

                    b.Property<decimal?>("PrecoVendaReferencia")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("preco_venda_referencia");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("produtos", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Proprietario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.ToTable("proprietarios", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AcessoBloqueado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("acesso_bloqueado");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<int?>("PerfilAcessoId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_acesso_id");

                    b.Property<bool?>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("removido");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("senha");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PerfilAcessoId");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Categoria", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Categorias")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.ConfiguracaoEstoque", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithOne("ConfiguracaoEstoque")
                        .HasForeignKey("SistemaEstoque.Domain.Entities.ConfiguracaoEstoque", "EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Empresa", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Proprietario", "Proprietario")
                        .WithMany("Empresas")
                        .HasForeignKey("ProprietarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Proprietario");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.EstoqueInsumo", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("EstoquesInsumos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Insumo", "Insumo")
                        .WithOne("EstoqueInsumo")
                        .HasForeignKey("SistemaEstoque.Domain.Entities.EstoqueInsumo", "InsumoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Insumo");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.EstoqueProduto", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("EstoquesProdutos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Produto", "Produto")
                        .WithOne("EstoqueProduto")
                        .HasForeignKey("SistemaEstoque.Domain.Entities.EstoqueProduto", "ProdutoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Fornecedor", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Fornecedores")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.HistoricoEstoqueInsumo", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("HistoricosEstoquesInsumos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.EstoqueInsumo", "EstoqueInsumo")
                        .WithMany("HistoricosEstoquesInsumos")
                        .HasForeignKey("EstoqueInsumoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("EstoqueInsumo");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.HistoricoEstoqueProduto", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("HistoricosEstoquesProdutos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.EstoqueProduto", "EstoqueProduto")
                        .WithMany("HistoricosEstoquesProdutos")
                        .HasForeignKey("EstoqueProdutoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("EstoqueProduto");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.HistoricoUsuarioAcesso", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("HistoricosUsuariosAcessos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Usuario", "Usuario")
                        .WithMany("HistoricosUsuariosAcessos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Insumo", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Insumos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Insumos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.LogAlteracao", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("LogsAlteracoes")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Usuario", "Usuario")
                        .WithMany("LogsAlteracoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Lote", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Lotes")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Fornecedor", "Fornecedor")
                        .WithMany("Lotes")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Usuario", "UsuarioRecebimento")
                        .WithMany("Lotes")
                        .HasForeignKey("UsuarioRecebimentoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Fornecedor");

                    b.Navigation("UsuarioRecebimento");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.LoteInsumo", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("LotesInsumos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Insumo", "Insumo")
                        .WithMany("LotesInsumos")
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Lote", "Lote")
                        .WithMany("LotesInsumos")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Insumo");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.LoteProduto", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("LotesProdutos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Lote", "Lote")
                        .WithMany("LotesProdutos")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Produto", "Produto")
                        .WithMany("LotesProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Lote");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.MovimentacaoInsumo", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("MovimentacoesInsumos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.EstoqueInsumo", "EstoqueInsumo")
                        .WithMany("MovimentacoesInsumos")
                        .HasForeignKey("EstoqueInsumoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Insumo", "Insumo")
                        .WithMany("MovimentacoesInsumos")
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.LoteInsumo", "LoteInsumo")
                        .WithMany("MovimentacoesInsumos")
                        .HasForeignKey("LoteInsumoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaEstoque.Domain.Entities.Usuario", "Usuario")
                        .WithMany("MovimentacoesInsumos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("EstoqueInsumo");

                    b.Navigation("Insumo");

                    b.Navigation("LoteInsumo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.MovimentacaoProduto", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("MovimentacoesProdutos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.EstoqueProduto", "EstoqueProduto")
                        .WithMany("MovimentacoesProdutos")
                        .HasForeignKey("EstoqueProdutoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.LoteProduto", "LoteProduto")
                        .WithMany("MovimentacoesProdutos")
                        .HasForeignKey("LoteProdutoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SistemaEstoque.Domain.Entities.Produto", "Produto")
                        .WithMany("MovimentacoesProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Usuario", "Usuario")
                        .WithMany("MovimentacoesProdutos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("EstoqueProduto");

                    b.Navigation("LoteProduto");

                    b.Navigation("Produto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.PerfilAcesso", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("PerfisAcessos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Permissoes.PermissaoCategoria", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("PermissoesCategorias")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.PerfilAcesso", "PerfilAcesso")
                        .WithOne("PermissaoCategoria")
                        .HasForeignKey("SistemaEstoque.Domain.Entities.Permissoes.PermissaoCategoria", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("PerfilAcesso");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Permissoes.PermissaoProduto", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("PermissoesProdutos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.PerfilAcesso", "PerfilAcesso")
                        .WithOne("PermissaoProduto")
                        .HasForeignKey("SistemaEstoque.Domain.Entities.Permissoes.PermissaoProduto", "PerfilAcessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("PerfilAcesso");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Produto", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Produtos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("SistemaEstoque.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SistemaEstoque.Domain.Entities.PerfilAcesso", "PerfilAcesso")
                        .WithMany("Usuarios")
                        .HasForeignKey("PerfilAcessoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Empresa");

                    b.Navigation("PerfilAcesso");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Insumos");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Empresa", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("ConfiguracaoEstoque");

                    b.Navigation("EstoquesInsumos");

                    b.Navigation("EstoquesProdutos");

                    b.Navigation("Fornecedores");

                    b.Navigation("HistoricosEstoquesInsumos");

                    b.Navigation("HistoricosEstoquesProdutos");

                    b.Navigation("HistoricosUsuariosAcessos");

                    b.Navigation("Insumos");

                    b.Navigation("LogsAlteracoes");

                    b.Navigation("Lotes");

                    b.Navigation("LotesInsumos");

                    b.Navigation("LotesProdutos");

                    b.Navigation("MovimentacoesInsumos");

                    b.Navigation("MovimentacoesProdutos");

                    b.Navigation("PerfisAcessos");

                    b.Navigation("PermissoesCategorias");

                    b.Navigation("PermissoesProdutos");

                    b.Navigation("Produtos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.EstoqueInsumo", b =>
                {
                    b.Navigation("HistoricosEstoquesInsumos");

                    b.Navigation("MovimentacoesInsumos");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.EstoqueProduto", b =>
                {
                    b.Navigation("HistoricosEstoquesProdutos");

                    b.Navigation("MovimentacoesProdutos");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Fornecedor", b =>
                {
                    b.Navigation("Lotes");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Insumo", b =>
                {
                    b.Navigation("EstoqueInsumo");

                    b.Navigation("LotesInsumos");

                    b.Navigation("MovimentacoesInsumos");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Lote", b =>
                {
                    b.Navigation("LotesInsumos");

                    b.Navigation("LotesProdutos");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.LoteInsumo", b =>
                {
                    b.Navigation("MovimentacoesInsumos");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.LoteProduto", b =>
                {
                    b.Navigation("MovimentacoesProdutos");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.PerfilAcesso", b =>
                {
                    b.Navigation("PermissaoCategoria")
                        .IsRequired();

                    b.Navigation("PermissaoProduto")
                        .IsRequired();

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Produto", b =>
                {
                    b.Navigation("EstoqueProduto");

                    b.Navigation("LotesProdutos");

                    b.Navigation("MovimentacoesProdutos");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Proprietario", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("SistemaEstoque.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("HistoricosUsuariosAcessos");

                    b.Navigation("LogsAlteracoes");

                    b.Navigation("Lotes");

                    b.Navigation("MovimentacoesInsumos");

                    b.Navigation("MovimentacoesProdutos");
                });
#pragma warning restore 612, 618
        }
    }
}
